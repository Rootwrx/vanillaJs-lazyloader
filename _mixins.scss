$grid-breakpoints: (
  sm: 640px,
  md: 768px,
  lg: 1024px,
  xl: 1280px,
  xxl: 1536px,
);

@mixin media($size, $type: min) {
  @if map-has-key($grid-breakpoints, $size) {
    $width: map-get($grid-breakpoints, $size);

    @if $type ==max {
      $width: $width - 1;
    }

    @media only screen and (#{$type}-width : $width) {
      @content;
    }
  }
}

@mixin media-between($lower, $upper) {
  @if map-has-key($grid-breakpoints, $lower) and
    map-has-key($grid-breakpoints, $upper)
  {
    $lower-breakpoint: map-get($grid-breakpoints, $lower);
    $upper-breakpoint: map-get($grid-breakpoints, $upper);

    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  }
}

@mixin lazy-loader(
  $loader-size: 50px,
  $loader-border: 5px,
  $loader-color: var(--clr-red),
  $loader-bg: var(--clr-rose-50)
) {
  &.loader {
    position: relative;
    overflow: hidden;
    &::after,
    &::before {
      content: "";
      position: absolute;
    }
    &::before {
      top: 50%;
      left: 50%;
      translate: -50% -50%;
      height: $loader-size;
      width: $loader-size;
      border: $loader-border solid $loader-color;
      border-left-width: 0px;
      z-index: 10;
      border-radius: 50%;
      animation: loaderspin 1s linear infinite;
    }

    &::after {
      height: 100%;
      width: 100%;
      background-color: $loader-bg;
      z-index: 5;
      inset: 0;
    }

    &:has(.loaded) {
      &::before,
      &::after {
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.5s ease-in, visibility 0.5s ease-in;
      }
    }
  }

  img.lazy-load {
    filter: blur(19px);
    opacity: 0;
    transition: opacity 0.3s ease-in, filter 1s ease-in;

    &.loaded {
      opacity: 1;
      filter: blur(0);
    }
  }
}

@keyframes loaderspin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@mixin fade($type: in, $duration: 0.3s, $easing: ease-in-out) {
  transition: all $duration $easing, height 0.3s ease-in-out;
  @if $type == in {
    pointer-events: all;
    visibility: visible;
    opacity: 1;
  } @else if $type == out {
    visibility: hidden;
    pointer-events: none;
    opacity: 0;
  }
}

@function rem($px, $base: 16px) {
  @return $px / $base * 1rem;
}
@mixin box($w, $h: $w) {
  width: $w;
  height: $h;
}

%flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

%flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

%grid-center {
  display: grid;
  place-items: center;
}
